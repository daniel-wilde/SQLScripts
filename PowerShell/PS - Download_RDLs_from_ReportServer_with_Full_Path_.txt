# Configuration data 
[string] $server   = "ServerName";        # SQL Server Instance. 
[string] $database = "ReportServer";        # ReportServer Database. 
[string] $folder   = "C:\Users\dw101951\Desktop\2012_Reports";          # Path to export the reports to. 
 
# Select-Statement for file name & blob data with filter. 
$sql = "SELECT REPLACE(CT.[Path],'/','\')
              ,CT.[Type] 
              ,CONVERT(varbinary(max), CT.[Content]) AS BinaryContent 
        FROM dbo.[Catalog] AS CT 
        WHERE CT.[Type] = 2"; 
 
# Open ADO.NET Connection with Windows authentification. 
$con = New-Object Data.SqlClient.SqlConnection; 
$con.ConnectionString = "Data Source=$server;Initial Catalog=$database;Integrated Security=True;"; 
$con.Open(); 
 
Write-Output ((Get-Date -format yyyy-MM-dd-HH:mm:ss) + ": Started ..."); 
 
# New command and reader. 
$cmd = New-Object Data.SqlClient.SqlCommand $sql, $con; 
$rd = $cmd.ExecuteReader(); 
 
$invalids = [System.IO.Path]::GetInvalidFileNameChars(); 
# Looping through all selected datasets. 
While ($rd.Read()) 
{ 
    Try 
    { 
        # Get the name and make it valid. 
        $name = $rd.GetString(0) + ".rdl"; 
		
		#need to figure out if it has a folder name
		$subfolderName = split-path $rd.GetString(0);
		$reportName = split-path $rd.GetString(0) -Leaf;
		$fullSubfolderName = $folder + $subfolderName;
		if(-not(Test-Path $fullSubfolderName))
		{
			#note this will create the full folder hierarchy
			[System.IO.Directory]::CreateDirectory($fullSubfolderName) | out-null
		}
		
		$newname = $folder + $name; 
         
        Write-Output ((Get-Date -format yyyy-MM-dd-HH:mm:ss) + ": Exporting {0}" -f $newname); 
		 
        # New BinaryWriter; existing file will be overwritten. 
        $fs = New-Object System.IO.FileStream ($newname), Create, Write; 
        $bw = New-Object System.IO.BinaryWriter($fs); 
 
        # Read of complete Blob with GetSqlBinary 
        $bt = $rd.GetSqlBinary(2).Value; 
        $bw.Write($bt, 0, $bt.Length); 
        $bw.Flush(); 
        $bw.Close(); 
        $fs.Close(); 
    } 
    Catch 
    { 
        Write-Output ("Fail") 
    } 
    Finally 
    { 
        $fs.Dispose(); 
    } 
} 
 
# Closing & Disposing all objects 
$rd.Close(); 
$cmd.Dispose(); 
$con.Close(); 
$con.Dispose(); 
 
Write-Output ("Finished");